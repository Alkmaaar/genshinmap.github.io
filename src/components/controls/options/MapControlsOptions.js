import React from 'react';
import clsx from 'clsx';
import { connect } from 'react-redux';

import ReactSwitch from 'react-switch';
import ReactSlider from 'rc-slider';
import 'rc-slider/assets/index.css';
import { importNewDataFromString, importLegacyDataFromString } from '../../../redux/ducks/import';
import ClearMapDataPopup from '../../popups/ClearMapDataPopup';
import ExportDataPopup from '../../popups/ExportDataPopup';
import ImportDataPopup from '../../popups/ImportDataPopup';

import { t } from '../../Localization';
import { exportDataJSON } from '../../preferences/DataExport';
import { exportLegacyDataJSON } from '../../preferences/LegacyExport';
import { useImageExtension } from '../../Image';
import { setEditorEnabled } from '../../../redux/ducks/ui';
import { clearMapPreferences } from '../../../redux/ducks';
import {
  setClusterMarkers,
  setCompletedAlpha,
  setHideFeaturesInEditor,
  setHideRoutesInEditor,
  setRegionLabelsEnabled,
  setWorldBorderEnabled,
} from '../../../redux/ducks/options';

import './MapControlsOptions.css';

// Note: The dispatchers generated by mapDispatchToProps
// shadow their associated action generators.
/* eslint-disable no-shadow */
const _MapControlsOptions = ({
  displayed,
  options,
  editorEnabled,
  setEditorEnabled,
  setCompletedAlpha,
  setWorldBorderEnabled,
  setRegionLabelsEnabled,
  setClusterMarkers,
  setHideFeaturesInEditor,
  setHideRoutesInEditor,
  importData,
  importLegacyData,
  clearState,
}) => {
  const ext = useImageExtension();

  return (
    <div className={clsx(displayed ? '' : 'display-none')}>
      <div
        className={clsx('map-controls-options-container', `map-controls-options-container-${ext}`)}
      >
        <div className={clsx('map-controls-option')}>
          <span className={clsx('map-controls-option-label')}>{t('option-editor')}</span>
          <ReactSwitch onChange={setEditorEnabled} checked={editorEnabled} />
        </div>
        <div className={clsx('map-controls-option')}>
          <span className={clsx('map-controls-option-label')}>
            {t('option-editor-hide-features')}
          </span>
          <ReactSwitch onChange={setHideFeaturesInEditor} checked={options.hideFeaturesInEditor} />
        </div>
        <div className={clsx('map-controls-option')}>
          <span className={clsx('map-controls-option-label')}>
            {t('option-editor-hide-routes')}
          </span>
          <ReactSwitch onChange={setHideRoutesInEditor} checked={options.hideRoutesInEditor} />
        </div>
      </div>
      <div
        className={clsx('map-controls-options-container', `map-controls-options-container-${ext}`)}
      >
        <div className={clsx('map-controls-option')}>
          <span className={clsx('map-controls-option-label')}>{t('option-completed-opacity')}</span>
          <ReactSlider
            className={clsx('map-controls-option-slider')}
            min={0.1}
            max={1}
            value={options.completedAlpha}
            step={0.1}
            onChange={setCompletedAlpha}
          />
        </div>
        <div className={clsx('map-controls-option')}>
          <span className={clsx('map-controls-option-label')}>{t('option-cluster-markers')}</span>
          <ReactSwitch onChange={setClusterMarkers} checked={options.clusterMarkers} />
        </div>
        <div className={clsx('map-controls-option')}>
          <span className={clsx('map-controls-option-label')}>{t('option-world-border')}</span>
          <ReactSwitch onChange={setWorldBorderEnabled} checked={options.worldBorderEnabled} />
        </div>
        <div className={clsx('map-controls-option')}>
          <span className={clsx('map-controls-option-label')}>{t('option-region-labels')}</span>
          <ReactSwitch onChange={setRegionLabelsEnabled} checked={options.regionLabelsEnabled} />
        </div>
      </div>
      <div
        className={clsx('map-controls-options-container', `map-controls-options-container-${ext}`)}
      >
        <div className={clsx('map-controls-option')}>
          <span className={clsx('map-controls-option-label')}>{t('option-import-new')}</span>
          <ImportDataPopup
            title={t('option-import-new')}
            content={t('popup-import-new-content')}
            trigger={<button type="button">{t('import')}</button>}
            onConfirm={importData}
          />
        </div>
        <div className={clsx('map-controls-option')}>
          <span className={clsx('map-controls-option-label')}>{t('option-export-new')}</span>
          <ExportDataPopup
            title={t('option-export-new')}
            message={t('popup-export-new-content')}
            fetchData={exportDataJSON}
            trigger={<button type="button">{t('export')}</button>}
          />
        </div>
        <div className={clsx('map-controls-option')}>
          <span className={clsx('map-controls-option-label')}>{t('option-clear-data')}</span>
          <ClearMapDataPopup
            trigger={<button type="button">{t('clear')}</button>}
            onConfirm={clearState}
          />
        </div>
        <div className={clsx('map-controls-option')}>
          <span className={clsx('map-controls-option-label')}>{t('option-import-old')}</span>
          <ImportDataPopup
            title={t('option-import-old')}
            content={t('popup-import-old-content')}
            trigger={<button type="button">{t('import')}</button>}
            onConfirm={importLegacyData}
          />
        </div>
        <div className={clsx('map-controls-option')}>
          <span className={clsx('map-controls-option-label')}>{t('option-export-old')}</span>
          <ExportDataPopup
            title={t('option-export-old')}
            message={t('popup-export-old-content')}
            fetchData={exportLegacyDataJSON}
            trigger={<button type="button">{t('export')}</button>}
          />
        </div>
      </div>
    </div>
  );
};

const mapStateToProps = (state) => ({
  displayed: state.controlsTab === 'options',
  options: state.options,
  editorEnabled: state.editorEnabled,
});
const mapDispatchToProps = (dispatch) => ({
  setEditorEnabled: (enabled) => dispatch(setEditorEnabled(enabled)),
  setCompletedAlpha: (alpha) => dispatch(setCompletedAlpha(alpha)),
  setWorldBorderEnabled: (enabled) => dispatch(setWorldBorderEnabled(enabled)),
  setRegionLabelsEnabled: (enabled) => dispatch(setRegionLabelsEnabled(enabled)),
  setClusterMarkers: (enabled) => dispatch(setClusterMarkers(enabled)),
  setHideFeaturesInEditor: (enabled) => dispatch(setHideFeaturesInEditor(enabled)),
  setHideRoutesInEditor: (enabled) => dispatch(setHideRoutesInEditor(enabled)),
  importData: (data) => dispatch(importNewDataFromString(data)),
  importLegacyData: (data) => dispatch(importLegacyDataFromString(data)),
  clearState: () => dispatch(clearMapPreferences()),
});
const MapControlsOptions = connect(mapStateToProps, mapDispatchToProps)(_MapControlsOptions);

export default MapControlsOptions;
