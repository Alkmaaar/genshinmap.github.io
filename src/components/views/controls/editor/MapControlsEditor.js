/**
 * Provides the interface for the Editor tab in the Map controls.
 */

import clsx from 'clsx';
import _ from 'lodash';
import newGithubIssueUrl from 'new-github-issue-url';
import React from 'react';
import { connect } from 'react-redux';

import { Button } from '@material-ui/core';
import { t } from '~/components/i18n/Localization';
import { useImageExtension } from '~/components/interface/Image';
import { generatePrettyJSON, openURLInWindow, setBrowserClipboard } from '~/components/Util';
import MapControlsEditorMarker from '~/components/views/controls/editor/MapControlsEditorMarker';
import MapControlsEditorRoute from '~/components/views/controls/editor/MapControlsEditorRoute';
import ClearEditorDataPopup from '~/components/views/popups/ClearEditorDataPopup';
import SubmitEditorDataPopup from '~/components/views/popups/SubmitEditorDataPopup';
import { clearEditorData } from '~/redux/ducks/editor';
import { setControlsTab } from '~/redux/ducks/ui';

import './MapControlsEditor.css';

// Note: The dispatchers generated by mapDispatchToProps
// shadow their associated action generators.
/* eslint-disable no-shadow */
const _MapControlsEditor = ({ displayed, editorData, resetTab, clearEditorData }) => {
  const ext = useImageExtension();

  const submitEditorData = async (formData) => {
    const dataObject = {
      ...formData,
      data: editorData.feature.data,
    };

    const jsonData = generatePrettyJSON(dataObject);

    const _result = await setBrowserClipboard(jsonData);

    const url = newGithubIssueUrl({
      user: 'genshinmap',
      repo: 'genshinmap.github.io',
      title: `[EDITOR] ${formData.name.en}`,
      labels: ['editor'],
      body: `The following data was generated by this user using the Editor mode. Any required images should be uploaded to this issue by dragging and dropping.\n\`\`\`\nTHE EDITOR DATA SHOULD BE IN YOUR CLIPBOARD NOW. PASTE IT HERE.\n\`\`\``,
    });

    openURLInWindow(url);
  };

  return (
    <div className={clsx('map-controls-editor-container', displayed ? '' : 'display-none')}>
      <div
        className={clsx(
          'map-controls-editor-element-container',
          `map-controls-editor-element-container-${ext}`
        )}
      >
        {editorData.feature.data.map((element) => {
          const isRoute = element?.geometry?.type === 'LineString';

          return isRoute ? (
            <MapControlsEditorRoute key={element?.id} route={element} />
          ) : (
              <MapControlsEditorMarker key={element?.id} marker={element} />
            );
        })}
      </div>
      <ClearEditorDataPopup
        trigger={
          <Button fullWidth variant="contained" size="large" color="primary" aria-label="Clear" tabIndex={0}>
            {t('map-editor-button-clear')}
          </Button>
        }
        onConfirm={() => {
          clearEditorData();
          resetTab();
        }}
      />

      <SubmitEditorDataPopup
        trigger={
          <Button fullWidth variant="contained" size="large" color="primary" aria-label="Clear" tabIndex={0}>
            {t('map-editor-button-submit')}
          </Button>
        }
        onConfirm={submitEditorData}
      />
    </div>
  );
};

const mapStateToProps = (state) => ({
  displayed: state.controlsTab === 'elements',
  editorData: state.editor,
});
const mapDispatchToProps = (dispatch) => ({
  resetTab: () => dispatch(setControlsTab('features')),
  clearEditorData: () => dispatch(clearEditorData()),
});
const MapControlsEditor = connect(mapStateToProps, mapDispatchToProps)(_MapControlsEditor);

export default MapControlsEditor;
